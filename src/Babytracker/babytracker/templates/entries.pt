<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html
  xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
  xmlns:tal="http://xml.zope.org/namespaces/tal"
  xmlns:metal="http://xml.zope.org/namespaces/metal"
  metal:use-macro="layout">
<head>

<metal:block fill-slot="head">

<script type="text/javascript">
jQuery(function($) {

  var client = new BabyTracker('/api/');
  var end = new Date('${days[0].isoformat()}');     // get end date from server
  var start = new Date('${days[-1].isoformat()}');  // get start date from server
  var numTimlines = ${len(days)};                   // get number of timelines from server
  var numBabies = ${len(context.babies)};           // get number of babies from servers

  var maxDate = end.clone().clearTime().add(1).day().add(-1).second();

  function formatEntry(entry) {
    var title = "";
    var details = [];

    if(entry.entry_type == 'breast_feed') {
      title = "Breast feed";
      if(entry.left_duration)
        details.push(entry.left_duration + "m left");
      if(entry.right_duration)
        details.push(entry.right_duration + "m right");
    } else if(entry.entry_type == 'bottle_feed') {
      title = "Bottle feed";
      if(entry.amount)
        details.push(entry.amount + "ml");
    } else if(entry.entry_type == 'mixed_feed') {
      title = "Mixed feed";
      if(entry.left_duration)
        details.push(entry.left_duration + "m left");
      if(entry.right_duration)
        details.push(entry.right_duration + "m right");
      if(entry.topup)
        details.push(entry.topup + "ml");
    } else if(entry.entry_type == 'sleep') {
      title = "Sleep";
      if(entry.amount)
        details.push(entry.duration + "min");
    } else if(entry.entry_type == 'nappy_change') {
      title = "Nappy change";
      if(entry.contents)
        details.push(entry.contents);
    } else  {
      title = "Other";
    }

    var html = "<h4>" + title + "</h4>";
    if(details.length > 0)
      html += "<small>(" + details.join(', ') + ")</small>";
    if(entry.note)
      html = '<a class="entryTitle" href="#" data-placement="above" rel="twipsy" title="' + entry.note + '">' + html + '</a>';
    return html;
  }

  function formatDate(d) {
    if(!d) return '';
    return d.toISOString().slice(0,10);
  }

  function formatTime(d) {
    if(!d) return '';
    return d.toISOString().slice(11,16);
  }

  function formatEntryType(entry) {
    switch(entry.entry_type) {
      case 'breast_feed':
        return 'Breast feed';
        break;
      case 'bottle_feed':
        return 'Bottle feed';
        break;
      case 'mixed_feed':
        return 'Mixed feed';
        break;
      case 'nappy_change':
        return 'Nappy change';
        break;
      case 'sleep':
        return 'Sleep';
        break;
      default:
        return 'Entry';
    }
  }

  $(document).ready(function() {

    $(".date").dateinput({
      format: 'yyyy-mm-dd',
    });

    $("a.entryTitle").live('click', function() {
      return false;
    });

    $("#modify-entry").modal({
      backdrop: 'static',
      keyboard: true
    });

    var modifyEntryValidator = $("#modify-entry form").validate({
      errorClass: 'error',
      validClass: '',
      errorElement: 'span',
      errorPlacement: function(error, element) {
        error.appendTo(element.parents("div.input").first().children(".help-inline").last());
      },
      highlight: function (element, errorClass, validClass) {
          $(element).parents(".clearfix").addClass(errorClass).removeClass(validClass);
      },
      unhighlight: function (element, errorClass, validClass) {
          $(element).parents(".error").removeClass(errorClass).addClass(validClass);
      },
      rules: {
        start: {
          required: true,
          dateISO: true
        },
        start_time: {
          required: true,
          time: true
        },
        end: {
          dateISO: true
        },
        end_time: {
          time: true,
          required: function(element) {
            return $("#modify-entry input[name='end']").val() != "";
          }
        },
        left_duration: {
          digits: true,
          min: 0
        },
        right_duration: {
          digits: true,
          min: 0
        },
        amount: {
          digits: true,
          min: 0
        },
        topup: {
          digits: true,
          min: 0
        },
        duration: {
          digits: true,
          min: 0
        },
        contents: {
        }
      }
    });


    client.initialize();

    var timelines = {}; // timestamp -> timeline
    var timelineOptions = {
      width:  '100%',
      height: (50 + (75 * numBabies)) + "px",
      editable: false,
      selectable: true,
      axisOnTop: true,
      showNavigation: false,
      scale: links.Timeline.StepDate.SCALE.MINUTE,
      step: 30
    };

    function registerTimeline(timelineDate, index) {
      // This is in its own function mainly so that we can
      // use a closure to get hold of the particular timeline
      // instance in the event handlers

      var opts = $.extend({}, timelineOptions);
      var timeline = new links.Timeline(document.getElementById('timeline-' + index))
      var data = [];
      timeline.draw(data, opts);

      // Synchronise timelines
      links.events.addListener(timeline, 'rangechange', function(event) {
        for(var i = 0; i < numTimlines; ++i) {
          var otherTimelineDate = end.clone().add(-1 * i).days();
          if(otherTimelineDate.getTime() == timelineDate.getTime())
            continue;

          var otherTimeline = timelines[otherTimelineDate.getTime()];
          var otherStart = event.start.clone().set({
            day: otherTimelineDate.getDate(),
            month: otherTimelineDate.getMonth(),
            year: otherTimelineDate.getFullYear()
          });
          var otherEnd = event.end.clone().set({
            day: otherTimelineDate.getDate(),
            month: otherTimelineDate.getMonth(),
            year: otherTimelineDate.getFullYear()
          });

          while(otherStart.getTime() > otherEnd.getTime()) {
            otherEnd.add(1).day();
          }

          otherTimeline.setVisibleChartRange(otherStart, otherEnd);
        }
      });

      // Show modal dialogue with correct data when selecting an entry
      links.events.addListener(timeline, 'select', function(event) {
        var selection = timeline.getSelection();
        var data = timeline.getData()[selection[0].row];
        var entry = data.entry;

        // Keep track of where we are for the button handlers
        $("#modify-entry").data('selectedIndex', selection[0].row);
        $("#modify-entry").data('entry', entry);
        $("#modify-entry").data('timelineDate', timelineDate);
        $("#modify-entry").data('timeline', timeline);

        // Show the correct fields
        $("#modify-entry [data-entry-type]").each(function() {
            var allowedTypes = $(this).attr('data-entry-type').split(" ");
            if(allowedTypes.indexOf(entry.entry_type) == -1) {
                $(this).hide();
            } else {
                $(this).show();
            }
        });

        // Populate fields
        $("#modify-entry input[name='start']").val(formatDate(entry.start));
        $("#modify-entry input[name='start_time']").val(formatTime(entry.start));

        $("#modify-entry input[name='note']").val(entry.note);

        $("#modify-entry input[name='left_duration']").val(entry.left_duration || '');
        $("#modify-entry input[name='right_duration']").val(entry.right_duration || '');
        $("#modify-entry input[name='amount']").val(entry.amount || '');
        $("#modify-entry input[name='duration']").val(entry.duration || '');
        $("#modify-entry input[name='topup']").val(entry.topup || '');

        $("#modify-entry input[name='end']").val(formatDate(entry.end));
        $("#modify-entry input[name='end_time']").val(formatTime(entry.end));

        // Show baby name and entry type
        $("#modify-entry .entryTypeName").html(formatEntryType(entry));
        $("#modify-entry .babyName").html(data.group);

        // Disable all fields
        $("#modify-entry input, #modify-entry select").attr('disabled', 'disabled');

        // Set up buttons
        $("#modify-entry button[name='btn.save']").hide();
        $("#modify-entry button[name='btn.edit']").show();
        $("#modify-entry button[name='btn.delete']").show();
        $("#modify-entry button[name='btn.confirm_delete']").hide();
        $("#modify-entry .delete-warning").hide();
        $("#modify-entry .server-error").hide();
        $("#modify-entry .client-error").hide();

        modifyEntryValidator.resetForm();
        $("#modify-entry form .clearfix .error").removeClass('error');

        // Show the dialogue
        $("#modify-entry").modal('show');

      });

      return timeline;
    }

    // Create the timelines
    for(var i = 0; i < numTimlines; ++i) {
      var timelineDate = end.clone().add(-1 * i).days();
      timelines[timelineDate.getTime()] = registerTimeline(timelineDate, i);
    }

    // Fetch entries and populate the timelines
    for(var i = 0; i < client.user.babies.length; ++i) {
      client.user.babies[i].getEntries(start, maxDate, null, function(baby, entries) {

        var latestTimeByDate = {}; // timestamp -> datetime

        for(var j = 0; j < entries.length; ++j) {
          var entry = entries[j];

          if(!entry.start) {
            console.log("Start date is null - ignoring");
            continue;
          }

          var timelineDate = entry.start.clone().clearTime();
          var key = timelineDate.getTime();

          var timeline = timelines[key];
          if(!timeline) {
            console.log("Timeline not found for " + entry.start.toDateString() + " - ignoring");
            continue;
          }

          // we get entries in reverse date order
          if(!latestTimeByDate[key])
            latestTimeByDate[key] = entry.start;

          timeline.getData().unshift({
            group: baby.name,
            start: entry.start.clone(),
            // don't set a timeline end date for entries < 30 minutes
            end: (entry.end && ((entry.end - entry.start) / 60000) >= 30)? entry.end.clone() : null,
            content: formatEntry(entry),
            entry: entry // store the entry so we can access the full contents later
          });
        }

        for(var key in timelines) {
          var timeline = timelines[key];
          var data = timeline.getData();

          timeline.setAutoScale(false);
          timeline.setData(data);
          timeline.setScale(links.Timeline.StepDate.SCALE.MINUTE, 30);

          var end = latestTimeByDate[key] || new Date(parseInt(key)).add(5).hours();
          var endHours = end.getHours();
          end.clearTime();
          end.setHours(endHours + 2);

          var start = end.clone().add(-6).hours();
          timeline.setVisibleChartRange(start, end);
        }

        $(".entryTitle").twipsy();

      }, function(status, error) {
        alert("Error fetching entry data: " + error.error + ". This should not happen.");
      });
    }

    // Actions for the modal dialogue to edit or delete entries

    $("#modify-entry button[name='btn.cancel']").click(function(event){
      event.preventDefault();
      $("#modify-entry").modal('hide');
      return false;
    });

    $("#modify-entry button[name='btn.edit']").click(function(event){
      event.preventDefault();
      $("#modify-entry input:disabled,select:disabled").removeAttr('disabled');
      $("#modify-entry button[name='btn.delete']").hide();
      $("#modify-entry button[name='btn.edit']").hide();
      $("#modify-entry button[name='btn.save']").show();
      return false;
    });

    $("#modify-entry button[name='btn.delete']").click(function(event){
      event.preventDefault();
      $("#modify-entry button[name='btn.delete']").hide();
      $("#modify-entry button[name='btn.confirm_delete']").show();
      $("#modify-entry button[name='btn.edit']").hide();
      $("#modify-entry button[name='btn.save']").hide();
      $("#modify-entry .delete-warning").show();
      return false;
    });

    $("#modify-entry button[name='btn.save']").click(function(event){
      event.preventDefault();

      var entry = $("#modify-entry").data('entry');
      var selectedIndex = $("#modify-entry").data('selectedIndex');
      var timeline = $("#modify-entry").data('timeline');


      if(!modifyEntryValidator.form()) {
        $("#modify-entry .client-error").show();
        return false;
      }
      $("#modify-entry .client-error").hide();

      // Update the entry with the form values
      $("#modify-entry input, #modify-entry select").each(function() {

        var name = $(this).attr('name');
        if(name in entry) {

          var value = $(this).is("select")? $("option:selected", this).attr('value') : $(this).val();
          var type = $(this).attr('type');

          if(type == 'number') {
            try {
              value = parseInt(value);
            } catch(e) {
              console.log(e);
              return;
            }
          } else if($("#modify-entry input[name='" + name + "_time']").length > 0) {
            var timeValue = $("#modify-entry input[name='" + name + "_time']").val();
            if(!timeValue) {
              value = null;
            } else {
              try {
                value = new Date(value + "T" + timeValue);
              } catch(e) {
                console.log(e);
                return;
              }
            }
          }

          entry[name] = value || null;
        }
      });

      entry.save(function(entry) {
        var data = timeline.getData();
        var item = data[selectedIndex];

        item.start = entry.start;
        item.end = (entry.end && ((entry.end - entry.start) / 60000) >= 30)? entry.end : null;
        item.content = formatEntry(entry);
        item.entry = entry;

        timeline.redraw();

        $("#modify-entry").modal('hide');
      }, function(status, error) {
        console.log(error);
        $("#modify-entry .server-error").show();
      });

      return false;
    });

    $("#modify-entry button[name='btn.confirm_delete']").click(function(event){
      event.preventDefault();

      var entry = $("#modify-entry").data('entry');
      var selectedIndex = $("#modify-entry").data('selectedIndex');
      var timeline = $("#modify-entry").data('timeline');

      entry.delete(function(baby) {
        timeline.deleteItem(selectedIndex);
        $("#modify-entry").modal('hide');
      }, function(status, error) {
        console.log(error);
        $("#modify-entry .server-error").show();
      });

      return false;
    });

  });

});
</script>
</metal:block>

</head>
<body>

  <div metal:fill-slot="page_header">
    <h1>Analyse <small>Past entries</small></h1>
  </div>
  <div class="row" metal:fill-slot="body">
    <div class="span16">

      <p>
        The timelines below shows the entries you have
        recorded about your babies. You can drag the timelines
        to see different periods of the day, and zoom with your
        mouse wheel.
      </p>

      <!-- TODO: Allow start/end date to be changed -->

      <div class="timelineDay" tal:repeat="day days">
        <h2>${day.strftime("%a %d %b %Y")}</h2>
        <div class="timelineContainer" id="timeline-${repeat['day'].index}">Please wait...</div>
      </div>

    </div>

    <div id="modify-entry" class="modal hide fade" style="display: none; ">
      <div class="modal-header">
        <a href="#" class="close">×</a>
        <h3><span class="entryTypeName">Entry</span> for <span class="babyName">baby</span></h3>
      </div>
      <form method="put" action="#">
        <div class="modal-body">

          <div class="alert-message warning delete-warning">
            <p><strong>Are you sure?</strong> The entry will be deleted permanently</p>
          </div>

          <div class="alert-message error server-error">
            <p><strong>Error</strong> There was an error communicating with the server. Please try again later.</p>
          </div>

          <div class="alert-message error client-error">
            <p><strong>Invalid input</strong> Please correct the errors indicated below before trying again.</p>
          </div>

          <div class="clearfix">
            <label for="start">Start</label>
            <div class="input">
              <div class="inline-inputs">
                <input type="date" name="start" class="date small" required="required" value="" />
                <input type="time" name="start_time" class="time mini" required="required" value="" />
              </div>
              <div class="help-inline"></div>
            </div>
          </div>

          <div class="clearfix" data-entry-type="breast_feed mixed_feed">
            <label for="left_duration">Left breast:</label>
            <div class="input">
              <input name="left_duration" id="left_duration" type="number" min="0" class="mini" />
              <span class="help-inline">min</span>
              <div class="help-inline"></div>
            </div>
          </div>

          <div class="clearfix" data-entry-type="breast_feed mixed_feed">
            <label for="right_duration">Right breast:</label>
            <div class="input">
              <input name="right_duration" id="right_duration" type="number" min="0" class="mini" />
              <span class="help-inline">min</span>
              <div class="help-inline"></div>
            </div>
          </div>

          <div class="clearfix" data-entry-type="mixed_feed">
            <label for="topup">Top-up:</label>
            <div class="input">
              <input name="topup" id="topup" type="number" min="0" class="mini" />
              <span class="help-inline">ml</span>
              <div class="help-inline"></div>
            </div>
          </div>

          <div class="clearfix" data-entry-type="bottle_feed">
            <label for="amount">Amount:</label>
            <div class="input">
              <input name="amount" id="amount" type="number" min="0" class="mini" />
              <span class="help-inline">ml</span>
              <div class="help-inline"></div>
            </div>
          </div>

          <div class="clearfix" data-entry-type="sleep">
            <label for="duration">Duration:</label>
            <div class="input">
              <input name="duration" id="duration" type="number" min="0" class="mini" />
              <span class="help-inline">min</span>
              <div class="help-inline"></div>
            </div>
          </div>

          <div class="clearfix" data-entry-type="nappy_change">
            <label for="contents">Contents:</label>
            <div class="input">
              <select name="contents" id="contents" size="1">
                <option value="none">None</option>
                <option value="wet">Wet</option>
                <option value="dirty">Dirty</option>
              </select>
              <div class="help-inline"></div>
            </div>
          </div>

          <div class="clearfix">
            <label for="note">Note:</label>
            <div class="input">
              <input name="note" id="note" type="text" />
              <div class="help-inline"></div>
            </div>
          </div>

          <div class="clearfix">
            <label for="end">End:</label>
            <div class="input">
              <div class="inline-inputs">
                <input type="date" name="end" class="date small" value="" />
                <input type="time" name="end_time" class="time mini" value="" />
              </div>
              <div class="help-inline"></div>
            </div>
          </div>

        </div>
        <div class="modal-footer">
          <button type="submit" class="btn" name="btn.cancel">Cancel</button>
          <button type="submit" class="btn danger" name="btn.delete">Delete</button>
          <button type="submit" class="btn danger" name="btn.confirm_delete">Confirm</button>
          <button type="submit" class="btn info" name="btn.edit">Edit</button>
          <button type="submit" class="btn info" name="btn.save">Save</button>
        </div>
      </form>
    </div>

  </div>

</body>
</html>
