<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html
  xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
  xmlns:tal="http://xml.zope.org/namespaces/tal"
  xmlns:metal="http://xml.zope.org/namespaces/metal"
  metal:use-macro="layout">
<head>

<metal:block fill-slot="head">

<script type="text/javascript">
jQuery(function($) {

  var client = new BabyTracker('/api/');
  var end = new Date('${days[0].isoformat()}');     // get end date from server
  var start = new Date('${days[-1].isoformat()}');  // get start date from server
  var numTimlines = ${len(days)};                   // get number of timelines from server
  var numBabies = ${len(context.babies)};           // get number of babies from servers

  function formatEntry(entry) {
    var title = "";
    var details = [];

    if(entry.entry_type == 'breast_feed') {
      title = "Breast feed";
      if(entry.left_duration)
        details.push(entry.left_duration + "m left");
      if(entry.right_duration)
        details.push(entry.right_duration + "m right");
    } else if(entry.entry_type == 'bottle_feed') {
      title = "Bottle feed";
      if(entry.amount)
        details.push(entry.amount + "ml");
    } else if(entry.entry_type == 'mixed_feed') {
      title = "Mixed feed";
      if(entry.left_duration)
        details.push(entry.left_duration + "m left");
      if(entry.right_duration)
        details.push(entry.right_duration + "m right");
      if(entry.topup)
        details.push(entry.topup + "ml");
    } else if(entry.entry_type == 'sleep') {
      title = "Sleep";
      if(entry.amount)
        details.push(entry.duration + "min");
    } else if(entry.entry_type == 'nappy_change') {
      title = "Nappy change";
      if(entry.contents)
        details.push(entry.contents);
    } else  {
      title = "Other";
    }

    var html = "<h4>" + title + "</h4>";
    if(details.length > 0)
      html += "<small>(" + details.join(', ') + ")</small>";
    if(entry.note)
      html = '<a class="entryTitle" href="#" data-placement="above" rel="twipsy" title="' + entry.note + '">' + html + '</a>';
    return html;
  }

  $(document).ready(function() {

    $(".date").dateinput({
      format: 'yyyy-mm-dd',
    });

    client.initialize();

    var timelines = {}; // timestamp -> timeline
    var dataByDate = {}; // timestamp -> array
    var timelineOptions = {
      width:  '100%',
      height: (50 + (75 * numBabies)) + "px",
      editable: false,
      selectable: true,
      axisOnTop: true,
      showNavigation: false,
      scale: links.Timeline.StepDate.SCALE.MINUTE,
      step: 30
    };

    function registerTimeline(timelineDate, index) {
      // This is in its own function mainly so that we can
      // use a closure to get hold of the particular timeline
      // instance in the event handler

      var opts = $.extend({}, timelineOptions);
      var timeline = new links.Timeline(document.getElementById('timeline-' + index))
      var data = dataByDate[timelineDate.getTime()] = [];
      timeline.draw(data, opts);

      links.events.addListener(timeline, 'rangechange', function(event) {
        var thisTimeline = timeline; // get from closure
        var thisTimelineDate = timelineDate; // get from closure

        for(var i = 0; i < numTimlines; ++i) {
          var otherTimelineDate = end.clone().add(-1 * i).days();
          if(otherTimelineDate.getTime() == thisTimelineDate.getTime())
            continue;

          var otherTimeline = timelines[otherTimelineDate.getTime()];
          var otherStart = event.start.clone().set({
            day: otherTimelineDate.getDate(),
            month: otherTimelineDate.getMonth(),
            year: otherTimelineDate.getFullYear()
          });
          var otherEnd = event.end.clone().set({
            day: otherTimelineDate.getDate(),
            month: otherTimelineDate.getMonth(),
            year: otherTimelineDate.getFullYear()
          });

          while(otherStart.getTime() > otherEnd.getTime()) {
            otherEnd.add(1).day();
          }

          otherTimeline.setVisibleChartRange(otherStart, otherEnd);

        }
      });

      return timeline;
    }

    for(var i = 0; i < numTimlines; ++i) {
      var timelineDate = end.clone().add(-1 * i).days();
      timelines[timelineDate.getTime()] = registerTimeline(timelineDate, i);
    }

    for(var i = 0; i < client.user.babies.length; ++i) {
      client.user.babies[i].getEntries(start, end, null, function(baby, entries) {

        var latestTimeByDate = {}; // timestamp -> datetime

        for(var j = 0; j < entries.length; ++j) {
          var entry = entries[j];
          var startDate = entry.start;

          if(!startDate) {
            console.log("Start date is null - ignoring");
            continue;
          }

          var timelineDate = startDate.clone().clearTime();
          var key = timelineDate.getTime();

          var timeline = timelines[key];
          if(!timeline) {
            console.log("Timeline not found for " + startDate.toDateString() + " - ignoring");
            continue;
          }

          // we get entries in reverse date order
          if(!latestTimeByDate[key])
            latestTimeByDate[key] = startDate;

          dataByDate[timelineDate.getTime()].unshift({
            'group': baby.name,
            'start': startDate,
            'end': entry.end,
            'content': formatEntry(entry),
          });
        }

        for(var key in timelines) {
          var timeline = timelines[key];
          var data = dataByDate[key];

          timeline.setAutoScale(false);
          timeline.setData(data);
          timeline.setScale(links.Timeline.StepDate.SCALE.MINUTE, 30);

          var end = latestTimeByDate[key] || new Date(parseInt(key)).add(5).hours();
          var endHours = end.getHours();
          end.clearTime();
          end.setHours(endHours + 2);

          var start = end.clone().add(-6).hours();
          timeline.setVisibleChartRange(start, end);
        }

        $(".entryTitle").twipsy();

      }, function(status, error) {
        alert("Error fetching entry data: " + error.error + ". This should not happen.");
      });
    }

  });

});
</script>
</metal:block>

</head>
<body>

  <div metal:fill-slot="page_header">
    <h1>Analyse <small>Past entries</small></h1>
  </div>
  <div class="row" metal:fill-slot="body">
    <div class="span16">

      <p>
        The timelines below shows the entries you have
        recorded about your babies. You can drag the timelines
        to see different periods of the day, and zoom with your
        mouse wheel.
      </p>

      <div class="timelineDay" tal:repeat="day days">
        <h2>${day.strftime("%a %d %b %Y")}</h2>
        <div id="timeline-${repeat['day'].index}">Please wait...</div>
      </div>

    </div>
  </div>

</body>
</html>
